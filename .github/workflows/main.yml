name: CI/CD Pipeline - Parent Watch

on:
  push:
    branches:
      - main

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Initialize Git User
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: setup
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  
          extensions: mbstring, intl
          ini-values: post_max_size=256M, max_execution_time=300
          coverage: none
      
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        env:
          SYMFONY_ENV: prod

  lint:
    name: Lint and Code Quality Check
    runs-on: ubuntu-latest
    needs: dependencies
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install PHP CS Fixer
        run: composer require --dev friendsofphp/php-cs-fixer
        continue-on-error: true

      - name: Run PHP CS Fixer for code linting
        run: |
          ./vendor/bin/php-cs-fixer fix --dry-run --diff || true
        continue-on-error: true

      - name: Upload CS Fixer report
        uses: actions/upload-artifact@v3
        with:
          name: php-cs-fixer-report
          path: .php_cs.cache
        continue-on-error: true

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        continue-on-error: false

      - name: Run PHPUnit tests with coverage
        run: ./vendor/bin/phpunit --testdox --coverage-text --coverage-clover=coverage.xml

      - name: Upload PHPUnit coverage report
        uses: actions/upload-artifact@v3
        with:
          name: phpunit-coverage
          path: coverage.xml

  release:
    name: Release and Notify
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref: release
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Initialize Git User
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Pull latest changes from main
        run: git pull origin main

      - name: Update version in files on main
        if: success()
        run: |
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          echo "Updating version to $VERSION"
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" composer.json
        continue-on-error: true

      - name: Commit updated composer.json on main
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git checkout main || git checkout -b main origin/main
          git add composer.json
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          git commit -m "Update version to $VERSION [skip ci]"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} main

      - name: Checkout release branch with token
        if: success()
        uses: actions/checkout@v3
        with:
          ref: release
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Merge main into release
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git fetch origin main
          git checkout -B release origin/main
          git push --force https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} release

      - name: Send Discord notification on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STEP_NAME=${{ github.job }}
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "<@&ROLE_ID> **Pipeline Failure - Parent Watch Repository **\n\n**Repository:** ${{ github.repository }}\n**Commit SHA:** ${{ github.sha }}\n**Commit Message:** ${{ github.event.head_commit.message }}\n**Failed Step:** '"${STEP_NAME}"'"
          }' $DISCORD_WEBHOOK_URL

      - name: Send Discord release notes on success
        if: success()
        env:
          DISCORD_WEBHOOK_URL_RELEASE: ${{ secrets.DISCORD_WEBHOOK_URL_RELEASE }}
        run: |
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "**Pipeline Successful - Parent Watch Repository **\n\n**Version:** '"${VERSION}"'\n**Repository:** ${{ github.repository }}\n**Commit SHA:** ${{ github.sha }}\n**Commit Message:** ${{ github.event.head_commit.message }}\n**Release Branch:** release"
          }' $DISCORD_WEBHOOK_URL_RELEASE
